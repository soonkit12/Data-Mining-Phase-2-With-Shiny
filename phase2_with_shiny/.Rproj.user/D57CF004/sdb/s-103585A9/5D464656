{
    "collab_server" : "",
    "contents" : "\ndevtools::source_url('https://raw.githubusercontent.com/brooksandrew/Rsenal/master/R/rules2df.R')\ndevtools::source_url('https://raw.githubusercontent.com/brooksandrew/Rsenal/master/R/bin.R')\n\narulesApp <- function (dataset, bin=T, vars=5, supp=0.1, conf=0.5) {\n  \n  ## binning numeric data\n  for(i in 1:ncol(dataset)) {\n    if(class(dataset[,i]) %in% c('numeric', 'integer')) dataset[,i] <- Rsenal::depthbin(dataset[,i], nbins=10)\n  }\n  \n  ## calling Shiny App\n  shinyApp(ui = shinyUI(pageWithSidebar(\n    \n    headerPanel(\"Association Rules\"),\n    \n    sidebarPanel(\n      \n      conditionalPanel(\n        condition = \"input.samp=='Sample'\",\n        numericInput(\"nrule\", 'Number of Rules', 5), br()\n      ),\n      \n      conditionalPanel(\n        condition = \"input.mytab=='graph'\",\n        radioButtons('graphType', label='Graph Type', choices=c('itemsets','items'), inline=T), br()\n      ),\n      \n      conditionalPanel(\n        condition = \"input.lhsv=='Subset'\", \n        uiOutput(\"choose_lhs\"), br()\n      ),\n      \n      conditionalPanel(\n        condition = \"input.rhsv=='Subset'\", \n        uiOutput(\"choose_rhs\"), br()\n      ),\n      \n      conditionalPanel(\n        condition = \"input.mytab=='grouped'\",\n        sliderInput('k', label='Choose # of rule clusters', min=1, max=150, step=1, value=15), br()\n      ),\n      \n      conditionalPanel(\n        condition = \"input.mytab %in%' c('grouped', 'graph', 'table', 'datatable', 'scatter', 'paracoord', 'matrix', 'itemFreq')\", \n        radioButtons('samp', label='Sample', choices=c('All Rules', 'Sample'), inline=T), br(),\n        uiOutput(\"choose_columns\"), br(),\n        sliderInput(\"supp\", \"Support:\", min = 0, max = 1, value = supp , step = 1/10000), br(),\n        sliderInput(\"conf\", \"Confidence:\", min = 0, max = 1, value = conf , step = 1/10000), br(),\n        selectInput('sort', label='Sorting Criteria:', choices = c('lift', 'confidence', 'support')), br(), br(),\n        numericInput(\"minL\", \"Min. items per set:\", 2), br(), \n        numericInput(\"maxL\", \"Max. items per set::\", 3), br(),\n        radioButtons('lhsv', label='LHS variables', choices=c('All', 'Subset')), br(),\n        radioButtons('rhsv', label='RHS variables', choices=c('All', 'Subset')), br(),\n        downloadButton('downloadData', 'Download Rules as CSV')\n      )\n      \n    ),\n    \n    mainPanel(\n      tabsetPanel(id='mytab',\n                  tabPanel('Grouped', value='grouped', plotOutput(\"groupedPlot\", width='100%', height='100%')),\n                  tabPanel('Graph', value='graph', plotOutput(\"graphPlot\", width='100%', height='100%')),\n                  tabPanel('Scatter', value='scatter', plotOutput(\"scatterPlot\", width='100%', height='100%')),\n                  tabPanel('Parallel Coordinates', value='paracoord', plotOutput(\"paracoordPlot\", width='100%', height='100%')),\n                  tabPanel('Matrix', value='matrix', plotOutput(\"matrixPlot\", width='100%', height='100%')),\n                  tabPanel('ItemFreq', value='itemFreq', plotOutput(\"itemFreqPlot\", width='100%', height='100%')),\n                  tabPanel('Table', value='table', verbatimTextOutput(\"rulesTable\")),\n                  tabPanel('Data Table', value='datatable', dataTableOutput(\"rulesDataTable\"))\n      )\n    )\n    \n  )),\n  \n  server = function(input, output) {\n    \n    output$choose_columns <- renderUI({\n      checkboxGroupInput(\"cols\", \"Choose variables:\", \n                         choices  = colnames(dataset),\n                         selected = colnames(dataset)[1:vars])\n    })\n    \n    \n    output$choose_lhs <- renderUI({\n      checkboxGroupInput(\"colsLHS\", \"Choose LHS variables:\", \n                         choices  = input$cols,\n                         selected = input$cols[1])\n    })\n    \n    output$choose_rhs <- renderUI({\n      checkboxGroupInput(\"colsRHS\", \"Choose RHS variables:\", \n                         choices  = input$cols,\n                         selected = input$cols[1])\n    })\n    \n    ## Extracting and Defining arules\n    rules <- reactive({\n      tr <- as(dataset[,input$cols], 'transactions')\n      arAll <- apriori(tr, parameter=list(support=input$supp, confidence=input$conf, minlen=input$minL, maxlen=input$maxL))\n      \n      if(input$rhsv=='Subset' & input$lhsv!='Subset'){\n        varsR <- character()\n        for(i in 1:length(input$colsRHS)){\n          tmp <- with(dataset, paste(input$colsRHS[i], '=', levels(as.factor(get(input$colsRHS[i]))), sep=''))\n          varsR <- c(varsR, tmp)\n        }\n        ar <- subset(arAll, subset=rhs %in% varsR)\n        \n      } else if(input$lhsv=='Subset' & input$rhsv!='Subset') {\n        varsL <- character()\n        for(i in 1:length(input$colsLHS)){\n          tmp <- with(dataset, paste(input$colsLHS[i], '=', levels(as.factor(get(input$colsLHS[i]))), sep=''))\n          varsL <- c(varsL, tmp)\n        }\n        ar <- subset(arAll, subset=lhs %in% varsL)\n        \n      } else if(input$lhsv=='Subset' & input$rhsv=='Subset') {\n        varsL <- character()\n        for(i in 1:length(input$colsLHS)){\n          tmp <- with(dataset, paste(input$colsLHS[i], '=', levels(as.factor(get(input$colsLHS[i]))), sep=''))\n          varsL <- c(varsL, tmp)\n        }\n        varsR <- character()\n        for(i in 1:length(input$colsRHS)){\n          tmp <- with(dataset, paste(input$colsRHS[i], '=', levels(as.factor(get(input$colsRHS[i]))), sep=''))\n          varsR <- c(varsR, tmp)\n        }\n        ar <- subset(arAll, subset=lhs %in% varsL & rhs %in% varsR)\n        \n      } else {\n        ar <- arAll\n      }\n      quality(ar)$conviction <- interestMeasure(ar, method='conviction', transactions=tr)\n      quality(ar)$hyperConfidence <- interestMeasure(ar, method='hyperConfidence', transactions=tr)\n      quality(ar)$cosine <- interestMeasure(ar, method='cosine', transactions=tr)\n      quality(ar)$chiSquare <- interestMeasure(ar, method='chiSquare', transactions=tr)\n      quality(ar)$coverage <- interestMeasure(ar, method='coverage', transactions=tr)\n      quality(ar)$doc <- interestMeasure(ar, method='doc', transactions=tr)\n      quality(ar)$gini <- interestMeasure(ar, method='gini', transactions=tr)\n      quality(ar)$hyperLift <- interestMeasure(ar, method='hyperLift', transactions=tr)\n      ar\n    })\n    \n    # Rule length\n    nR <- reactive({\n      nRule <- ifelse(input$samp == 'All Rules', length(rules()), input$nrule)\n    })\n    \n    ## Grouped Plot #########################\n    output$groupedPlot <- renderPlot({\n      ar <- rules()\n      plot(sort(ar, by=input$sort)[1:nR()], method='grouped', control=list(k=input$k))\n    }, height=800, width=800)\n    \n    ## Graph Plot ##########################\n    output$graphPlot <- renderPlot({\n      ar <- rules()\n      plot(sort(ar, by=input$sort)[1:nR()], method='graph', control=list(type=input$graphType))\n    }, height=800, width=800)\n    \n    ## Scatter Plot ##########################\n    output$scatterPlot <- renderPlot({\n      ar <- rules()\n      plot(sort(ar, by=input$sort)[1:nR()], method='scatterplot')\n    }, height=800, width=800)\n    \n    ## Parallel Coordinates Plot ###################\n    output$paracoordPlot <- renderPlot({\n      ar <- rules()\n      plot(sort(ar, by=input$sort)[1:nR()], method='paracoord')\n    }, height=800, width=800)\n    \n    ## Matrix Plot ###################\n    output$matrixPlot <- renderPlot({\n      ar <- rules()\n      plot(sort(ar, by=input$sort)[1:nR()], method='matrix', control=list(reorder=T))\n    }, height=800, width=800)\n    \n    ## Item Frequency Plot ##########################\n    output$itemFreqPlot <- renderPlot({\n      trans <- as(dataset[,input$cols], 'transactions')\n      itemFrequencyPlot(trans)\n    }, height=800, width=800)\n    \n    ## Rules Data Table ##########################\n    output$rulesDataTable <- renderDataTable({\n      ar <- rules()\n      rulesdt <- rules2df(ar)\n      rulesdt\n    })\n    \n    ## Rules Printed ########################\n    output$rulesTable <- renderPrint({\n      #hack to disply results... make sure this match line above!!\n      #ar <- apriori(dataset[,input$cols], parameter=list(support=input$supp, confidence=input$conf, minlen=input$minL, maxlen=input$maxL))\n      ar <- rules()\n      inspect(sort(ar, by=input$sort))\n    })\n    \n    ## Download data to csv ########################\n    output$downloadData <- downloadHandler(\n      filename = 'arules_data.csv',\n      content = function(file) {\n        write.csv(rules2df(rules()), file)\n      }\n    )\n    \n    \n  }\n  )\n}\n",
    "created" : 1484310061786.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "566678109",
    "id" : "5D464656",
    "lastKnownWriteTime" : 1484152107,
    "last_content_update" : 1484152107,
    "path" : "~/R/Assignment/shiny_arules.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}