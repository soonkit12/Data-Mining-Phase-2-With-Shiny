{
    "collab_server" : "",
    "contents" : "##############################################################\n#         Install missing packages and load library          #\n##############################################################\nif(require(\"DT\")==FALSE){install.packages(\"DT\")}\nlibrary(DT)\nif(require(\"ggplot2\")==FALSE){install.packages(\"ggplot2\")}\nlibrary(ggplot2)\nif(require(\"Amelia\")==FALSE){install.packages(\"Amelia\")}\nlibrary(Amelia)\nif(require(\"arules\")==FALSE){install.packages(\"arules\")}\nlibrary(arules)\nif(require(\"arulesViz\")==FALSE){install.packages(\"arulesViz\")}\nlibrary(arulesViz)\n##############################################################\n\n#Read dataset as transaction\ntran1 <- read.transactions(\"files/1000-out1.csv\", format =\"basket\",  sep = \",\", rm.duplicates = TRUE, cols=1)\n\n#create vector for item names according item ID\nmyLabels <- c(\"Chocolate Cake\",\"Lemon Cake\", \"Almond Tart\", \"Apple Pie\",\"Apple Tart\",\n              \"Apricot Tart\", \"Berry Tart\", \"Blackberry Tart\", \"Blueberry Tart\",\"Chocolate Tart\", \n              \"Cherry Tart\", \"Lemon Tart\",\"Casino Cake\",\"Pecan Tart\", \"Ganache Cookie\",\n              \"Gongolais Cookie\", \"Raspberry Cookie\", \"Lemon Cookie\",\"Chocolate Meringue\",\"Vanilla Meringue\",\n              \"Marzipan Cookie\", \"Tuile Cookie\", \"Walnut Cookie\",\"Opera Cake\",\"Almond Croissant\", \n              \"Apple Croissant\", \"Apricot Croissant\", \"Cheese Croissant\", \"Chocolate Croissant\",\"Apricot Danish\",\n              \"Apple Danish\",\"Almond Twist\",\"Almond Bear Claw\", \"Blueberry Danish\",  \"Strawberry Cake\",\n              \"Lemon Lemonade\", \"Raspberry Lemonade\",\"Orange Juice\",\"Green Tea\",\"Bottled Water\",\n              \"Hot Coffee\",\"Chocolate Coffee\",\"Vanilla Frappuccino\", \"Cherry Soda\", \"Single Espresso\",\n              \"Truffle Cake\", \"Chocolate Eclair\", \"Coffee Eclair\", \"Vanilla Eclair\", \"Napoleon Cake\")\n\n#label item name to tran1\nitemInfo(tran1) <- data.frame(labels = myLabels)\n\n#convert transaction data as dataframe\nitemdata = as(tran1, \"data.frame\")\n\n#exchange itemdata column position\nitemdata <- itemdata[c(\"transactionID\",\"items\")]\n\n\n#create item references list\nitemslist <- matrix(c(0:9,\"Chocolate Cake\",\"Lemon Cake\", \"Casino Cake\",\"Opera Cake\",\"Strawberry Cake\",\"Truffle Cake\", \"Chocolate Eclair\", \"Coffee Eclair\", \"Vanilla Eclair\", \"Napoleon Cake\",\n                      10:19,\"Almond Tart\", \"Apple Pie\",\"Apple Tart\",\"Apricot Tart\", \"Berry Tart\", \"Blackberry Tart\", \"Blueberry Tart\",\"Chocolate Tart\",\"Cherry Tart\", \"Lemon Tart\",\n                      20:29,\"Pecan Tart\", \"Ganache Cookie\",\"Gongolais Cookie\", \"Raspberry Cookie\", \"Lemon Cookie\",\"Chocolate Meringue\",\"Vanilla Meringue\",\"Marzipan Cookie\", \"Tuile Cookie\", \"Walnut Cookie\",\n                      30:39,\"Almond Croissant\",\"Apple Croissant\", \"Apricot Croissant\", \"Cheese Croissant\", \"Chocolate Croissant\",\"Apricot Danish\",\"Apple Danish\",\"Almond Twist\",\"Almond Bear Claw\", \"Blueberry Danish\",  \n                      40:49,\"Lemonade\", \"Raspberry Lemonade\",\"Orange Juice\",\"Green Tea\",\"Bottled Water\",\"Hot Coffee\",\"Chocolate Coffee\",\"Vanilla Frappuccino\", \"Cherry Soda\", \"Single Espresso\"), ncol = 10)\ncolnames(itemslist) <- c(\"Item ID\",\"Item Name\",\"Item ID\",\"Item Name\",\"Item ID\",\"Item Name\",\"Item ID\",\"Item Name\",\"Item ID\",\"Item Name\")\n\n#find association rule with default setting\ntran1rules0 <- apriori(tran1) \n\n\n#Start Server Setting\nserver <- function(input, output,session) {\n  \n  #Render Table\n  #Item List\n  output$itemsTable <- renderTable(\n    itemslist,\n    width = \"auto\",\n    align = \"c\"\n  )\n  \n  #Item Dataset\n  output$itemsDataset <- renderDataTable(\n    itemdata\n  )\n  \n  #Item Frequence\n  output$feqPlot <- renderPlot({\n    itemFrequencyPlot(tran1, \n      topN = input$feqTopN, \n      support = input$feqSupport\n    )\n  })\n  output$feq_plot_clickInfo <- renderText({\n    paste0(input$feq_plot_click$y)\n  })\n  \n  #Get Interesting Rules\n  output$rInterestRules <- renderDataTable({\n    tran1rules <- apriori(\n      tran1,\n      parameter = list(\n        sup = 0.03, \n        conf = 0.9, \n        minlen=2,\n        target=\"rules\")\n    )\n    subset.matrix <- is.subset(tran1rules, tran1rules)\n    subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA\n    redundant <- colSums(subset.matrix, na.rm=T) >=1\n    rules.pruned <- tran1rules[!redundant]\n    \n    if(input$rbtnRules == \"default\"){\n      tran1rules0 = as((tran1rules0),\"data.frame\")\n      tran1rules0\n    }\n    else if(input$rbtnRules == \"wredundant\"){\n      tran1rules = as((tran1rules),\"data.frame\")\n      tran1rules[\"rules\"]\n    }\n    else if(input$rbtnRules == \"woredundant\"){\n      rules.pruned = as((rules.pruned),\"data.frame\")\n      rules.pruned[\"rules\"]\n    }\n  })\n  \n  #Rules\n  observe({\n    if(input$rbtnRules == \"default\") {\n      session$sendCustomMessage(type=\"jsCode\",\n                                list(code= \"\n                                     $('#rConf').prop('disabled',true);\n                                     $('#rSupport').prop('disabled',true);\n                                     $('#rMinLen').prop('disabled',true);\n                                \"))\n    } else {\n      session$sendCustomMessage(type=\"jsCode\",\n                                list(code= \"\n                                     $('#rConf').prop('disabled',false);\n                                     $('#rSupport').prop('disabled',false);\n                                     $('#rMinLen').prop('disabled',false);\n                                \"))\n    }\n  })\n  #Get Rules View\n  output$rRules <- renderDataTable({\n    tran1rules <- apriori(\n      tran1,\n      parameter = list(\n        sup = input$rSupport, \n        conf = input$rConf, \n        minlen=input$rMinLen,\n        target=\"rules\")\n    )\n    subset.matrix <- is.subset(tran1rules, tran1rules)\n    subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA\n    redundant <- colSums(subset.matrix, na.rm=T) >=1\n    rules.pruned <- tran1rules[!redundant]\n    \n    if(input$rbtnRules == \"default\"){\n      tran1rules0 = as((tran1rules0),\"data.frame\")\n      tran1rules0\n    }\n    else if(input$rbtnRules == \"wredundant\"){\n      tran1rules = as((tran1rules),\"data.frame\")\n      tran1rules[\"rules\"]\n    }\n    else if(input$rbtnRules == \"woredundant\"){\n      rules.pruned = as((rules.pruned),\"data.frame\")\n      rules.pruned[\"rules\"]\n    }\n  })\n  \n  #Get Rules Summary\n  output$rSummary <- renderPrint({\n    #Setting Rules\n    tran1rules <- apriori(\n      tran1,\n      parameter = list(\n        sup = input$rSupport, \n        conf = input$rConf, \n        minlen=input$rMinLen,\n        target=\"rules\")\n    )\n    subset.matrix <- is.subset(tran1rules, tran1rules)\n    subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA\n    redundant <- colSums(subset.matrix, na.rm=T) >=1\n    rules.pruned <- tran1rules[!redundant]\n    \n    if(input$rbtnRules == \"default\"){\n      summary(tran1rules0)\n    }\n    else if(input$rbtnRules == \"wredundant\"){\n      summary(tran1rules)\n    }\n    else if(input$rbtnRules == \"woredundant\"){\n      summary(rules.pruned)\n    }\n  })\n  \n  #Get Rules Inspect\n  output$rInspect <- renderPrint({\n    #Setting Rules\n    tran1rules <- apriori(\n      tran1,\n      parameter = list(\n        sup = input$rSupport, \n        conf = input$rConf, \n        minlen=input$rMinLen,\n        target=\"rules\")\n    )\n    subset.matrix <- is.subset(tran1rules, tran1rules)\n    subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA\n    redundant <- colSums(subset.matrix, na.rm=T) >=1\n    rules.pruned <- tran1rules[!redundant]\n    \n    if(input$rbtnRules == \"default\"){\n      inspect(tran1rules0)\n    }\n    else if(input$rbtnRules == \"wredundant\"){\n      if(input$rbtnInspectType == \"default\"){\n        inspect(tran1rules)\n      }\n      else{ \n        inspect(sort(tran1rules, by=input$rbtnInspectType, decreasing= input$rbtnInspectOrder))\n      }\n    }\n    else if(input$rbtnRules == \"woredundant\"){\n      if(input$rbtnInspectType == \"default\"){\n        inspect(rules.pruned)\n      }\n      else{\n        inspect(sort(rules.pruned, by=input$rbtnInspectType, decreasing= input$rbtnInspectOrder))\n      }\n    }\n  })\n  \n  #Get Rules Plot\n  output$rulesPlot <- renderPlot({\n    \n    #Setting Rules\n    tran1rules <- apriori(\n      tran1,\n      parameter = list(\n        sup = input$rSupport, \n        conf = input$rConf, \n        minlen=input$rMinLen,\n        target=\"rules\")\n    )\n    subset.matrix <- is.subset(tran1rules, tran1rules)\n    subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA\n    redundant <- colSums(subset.matrix, na.rm=T) >=1\n    rules.pruned <- tran1rules[!redundant]\n    \n    if(input$rbtnRules == \"default\"){\n      plot(tran1rules0)\n    }\n    else if(input$rbtnRules == \"wredundant\"){\n      if(input$rbtnPlotsType == \"default\"){\n        if(input$rbtnPlotsControl == \"default\"){\n          plot(tran1rules)\n        }\n        else if(input$rbtnPlotsControl == \"k\"){\n          plot(tran1rules, control = list(k = 5))\n        }\n        else if(input$rbtnPlotsControl == \"type\"){\n          plot(tran1rules, control=list(type=\"items\"))\n        }\n        else if(input$rbtnPlotsControl == \"alpha\"){\n          plot(tran1rules, control=list(alpha=.5, reorder=TRUE))\n        }\n      }\n      else{\n        if(input$rbtnPlotsControl == \"default\"){\n          plot(tran1rules, method = input$rbtnPlotsType)\n        }\n        else if(input$rbtnPlotsControl == \"k\"){\n          plot(tran1rules, method = input$rbtnPlotsType, control = list(k = 5))\n        }\n        else if(input$rbtnPlotsControl == \"type\"){\n          plot(tran1rules, method=input$rbtnPlotsType, control=list(type=\"items\"))\n        }\n        else if(input$rbtnPlotsControl == \"alpha\"){\n          plot(tran1rules, method=input$rbtnPlotsType,  control=list(alpha=.5, reorder=TRUE))\n        }\n      }\n        \n    }\n    else if(input$rbtnRules == \"woredundant\"){\n      if(input$rbtnPlotsType == \"default\"){\n        if(input$rbtnPlotsControl == \"default\"){\n          plot(rules.pruned)\n        }\n        else if(input$rbtnPlotsControl == \"k\"){\n          plot(rules.pruned, control = list(k = 5))\n        }\n        else if(input$rbtnPlotsControl == \"type\"){\n          plot(rules.pruned, control=list(type=\"items\"))\n        }\n        else if(input$rbtnPlotsControl == \"alpha\"){\n          plot(rules.pruned, control=list(alpha=.5, reorder=TRUE))\n        }\n      }\n      else{\n        if(input$rbtnPlotsControl == \"default\"){\n          plot(rules.pruned, method = input$rbtnPlotsType)\n        }\n        else if(input$rbtnPlotsControl == \"k\"){\n          plot(rules.pruned, method = input$rbtnPlotsType, control = list(k = 5))\n        }\n        else if(input$rbtnPlotsControl == \"type\"){\n          plot(rules.pruned, method=input$rbtnPlotsType, control=list(type=\"items\"))\n        }\n        else if(input$rbtnPlotsControl == \"alpha\"){\n          plot(rules.pruned, method=input$rbtnPlotsType,  control=list(alpha=.5, reorder=TRUE))\n        }\n      }\n      \n    }\n  })\n  \n  #About Us\n  output$Ben <- renderImage({\n      return(list(\n        src = \"files/Ben.jpg\",\n        filetype = \"image/jpeg\",\n        alt = \"This is a Benjamin\"\n      ))\n  }, deleteFile = FALSE)\n  output$Mah <- renderImage({\n    return(list(\n      src = \"files/Mah.jpg\",\n      filetype = \"image/jpeg\",\n      alt = \"This is a Siew Chin\"\n    ))\n  }, deleteFile = FALSE)\n  output$Ronald <- renderImage({\n    return(list(\n      src = \"files/Ronald.jpg\",\n      filetype = \"image/jpeg\",\n      alt = \"This is a Soon Kit\"\n    ))\n  }, deleteFile = FALSE)\n  output$CR <- renderImage({\n    return(list(\n      src = \"files/CR.jpg\",\n      filetype = \"image/jpeg\",\n      alt = \"This is a Chong Raen\"\n    ))\n  }, deleteFile = FALSE)\n  \n}\n\n",
    "created" : 1484153388036.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "189256063",
    "id" : "40DD0740",
    "lastKnownWriteTime" : 1484307508,
    "last_content_update" : 1484307508936,
    "path" : "~/R/Assignment/phase2/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}